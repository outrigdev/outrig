version: "3"

tasks:
    dev:vite:
        desc: Run the Vite development server
        cmds:
            - npm run dev

    dev:
        desc: Run the Go server in development mode
        cmds:
            - mkdir -p server/pkg/web/dist
            - touch server/pkg/web/dist/.gitkeep
            - OUTRIG_DEV=1 go run -ldflags "-X main.OutrigBuildTime=$(date +%Y%m%d%H%M%S) -X main.OutrigCommit=$(git rev-parse --short HEAD)" server/main-server.go server

    clean:webdist:
        desc: Clean the web embed directory for Go server
        cmds:
            - rm -rf server/pkg/web/dist
            - mkdir -p server/pkg/web/dist
            - touch server/pkg/web/dist/.gitkeep

    clean:
        desc: Clean build artifacts
        deps: [clean:webdist]
        cmds:
            - rm -rf dist dist-fe

    build:frontend:
        desc: Build the frontend for production
        deps: [clean]
        cmds:
            - npm run build
            - cp -r dist-fe/* server/pkg/web/dist/

    build:server:
        desc: Build the Go server with embedded frontend
        deps: [build:frontend]
        cmds:
            - mkdir -p bin/
            - go build -ldflags "-X main.OutrigBuildTime=$(date +%Y%m%d%H%M%S) -X main.OutrigCommit=$(git rev-parse --short HEAD)" -o bin/outrig server/main-server.go

    build:
        desc: Build everything for production
        cmds:
            - task: build:server
            
    build:macos-app:
        desc: Build the complete macOS app bundle
        cmds:
            - task: build:server
            - task: build:outrigapp
            - task: build:app-bundle
            - echo "✅ macOS app bundle built successfully at dist/Outrig.app"

    prod:
        desc: Run the production server
        deps:
            - build
        cmds:
            - OUTRIG_NOTELEMETRY=1 ./bin/outrig server

    generate:
        desc: Generate RPC code (Go/TypeScript)
        cmds:
            - go run server/cmd/generatego/main-generatego.go
            - go run server/cmd/generatets/main-generatets.go

    testrun:
        desc: run main-test.go to generate some fake data
        cmds:
            - go run server/cmd/test/main-test.go

    testsmall:
        desc: run main-testsmall.go to generate minimal test data
        cmds:
            - go run server/cmd/testsmall/main-testsmall.go

    test:noop:
        desc: build main-testsmall.go with +no_outrig
        cmds:
            - go run -tags no_outrig server/cmd/testsmall/main-testsmall.go

    release:check:
        desc: Check if the GoReleaser configuration is valid
        cmds:
            - goreleaser check

    release:local:
        desc: Build a local release for testing (no publishing)
        cmds:
            - goreleaser release --snapshot --clean

    release:
        desc: Create and publish a new release
        cmds:
            - goreleaser release --clean

    install:
        desc: Build and install outrig to ~/.local/bin
        deps:
            - build
        cmds:
            - mkdir -p ~/.local/bin
            - cp bin/outrig ~/.local/bin/
            - chmod 755 ~/.local/bin/outrig
            - echo "Outrig installed to ~/.local/bin/outrig"

    updateversions:
        desc: Set the Outrig version in both server and SDK
        vars:
            VERSION: "{{.CLI_ARGS}}"
        cmds:
            - echo "Setting Outrig version to {{.VERSION}}"
            - sed -i.bak 's/var OutrigServerVersion = ".*"/var OutrigServerVersion = "{{.VERSION}}"/' server/pkg/serverbase/serverbase.go && rm server/pkg/serverbase/serverbase.go.bak
            - sed -i.bak 's/const OutrigSDKVersion = ".*"/const OutrigSDKVersion = "{{.VERSION}}"/' pkg/base/base.go && rm pkg/base/base.go.bak
            # Update version in package.json and Info.plist (strip the 'v' prefix if present)
            - |
                VERSION_NO_V=$(echo "{{.VERSION}}" | sed 's/^v//')
                sed -i.bak 's/"version": ".*"/"version": "'$VERSION_NO_V'"/' package.json && rm package.json.bak
                sed 's/VERSION_PLACEHOLDER/'$VERSION_NO_V'/g' macosapp/assets/Info.plist.template > macosapp/assets/Info.plist
            - echo "✅ Version updated to {{.VERSION}} in server, SDK, package.json, and Info.plist"

    build:outrigapp:
        desc: Build the macOS systray app
        cmds:
            - mkdir -p bin/
            - cd macosapp && go build -o ../bin/outrigapp main-outrigapp.go

    build:app-bundle:
        desc: Create a macOS .app bundle
        deps: [build:server, build:outrigapp]
        cmds:
            - mkdir -p dist/Outrig.app/Contents/{MacOS,Resources}
            - cp bin/outrigapp dist/Outrig.app/Contents/MacOS/
            - cp bin/outrig dist/Outrig.app/Contents/MacOS/
            - chmod +x dist/Outrig.app/Contents/MacOS/outrigapp
            - chmod +x dist/Outrig.app/Contents/MacOS/outrig
            - cp macosapp/assets/Info.plist dist/Outrig.app/Contents/
            - cp macosapp/assets/outrig.icns dist/Outrig.app/Contents/Resources/AppIcon.icns
            - echo "✅ Created app bundle at dist/Outrig.app"

    create:icns:
        desc: Create an .icns file from the PNG icon
        cmds:
            - cd macosapp && rm -rf outrig.iconset && mkdir -p outrig.iconset
            - cd macosapp && sips -z 16 16     assets/outrigapp-iconbase.png --out outrig.iconset/icon_16x16.png
            - cd macosapp && sips -z 32 32     assets/outrigapp-iconbase.png --out outrig.iconset/icon_16x16@2x.png
            - cd macosapp && sips -z 32 32     assets/outrigapp-iconbase.png --out outrig.iconset/icon_32x32.png
            - cd macosapp && sips -z 64 64     assets/outrigapp-iconbase.png --out outrig.iconset/icon_32x32@2x.png
            - cd macosapp && sips -z 128 128   assets/outrigapp-iconbase.png --out outrig.iconset/icon_128x128.png
            - cd macosapp && sips -z 256 256   assets/outrigapp-iconbase.png --out outrig.iconset/icon_128x128@2x.png
            - cd macosapp && sips -z 256 256   assets/outrigapp-iconbase.png --out outrig.iconset/icon_256x256.png
            - cd macosapp && sips -z 512 512   assets/outrigapp-iconbase.png --out outrig.iconset/icon_256x256@2x.png
            - cd macosapp && sips -z 512 512   assets/outrigapp-iconbase.png --out outrig.iconset/icon_512x512.png
            - cd macosapp && sips -z 1024 1024 assets/outrigapp-iconbase.png --out outrig.iconset/icon_512x512@2x.png
            - cd macosapp && iconutil -c icns outrig.iconset -o assets/outrig.icns
            - echo "✅ Created outrig.icns"

    release:tag:git:
        desc: Create a git tag after verifying versions match and git directory is clean
        vars:
            VERSION: "{{.CLI_ARGS}}"
        cmds:
            # Check if git directory is clean
            - |
                if [ -n "$(git status --porcelain)" ]; then
                  echo "❌ Error: Git directory is not clean. Please commit all changes before tagging."
                  exit 1
                fi
            # Check if server version matches
            - |
                SERVER_VERSION=$(grep 'var OutrigServerVersion = ' server/pkg/serverbase/serverbase.go | cut -d'"' -f2)
                if [ "$SERVER_VERSION" != "{{.VERSION}}" ]; then
                  echo "❌ Error: Server version ($SERVER_VERSION) does not match requested tag version ({{.VERSION}})"
                  echo "Run 'task updateversions {{.VERSION}}' first to update versions"
                  exit 1
                fi
            # Check if SDK version matches
            - |
                SDK_VERSION=$(grep 'const OutrigSDKVersion = ' pkg/base/base.go | cut -d'"' -f2)
                if [ "$SDK_VERSION" != "{{.VERSION}}" ]; then
                  echo "❌ Error: SDK version ($SDK_VERSION) does not match requested tag version ({{.VERSION}})"
                  echo "Run 'task updateversions {{.VERSION}}' first to update versions"
                  exit 1
                fi
            # Check if package.json version matches (without 'v' prefix)
            - |
                VERSION_NO_V=$(echo "{{.VERSION}}" | sed 's/^v//')
                PKG_VERSION=$(grep '"version": "' package.json | cut -d'"' -f4)
                if [ "$PKG_VERSION" != "$VERSION_NO_V" ]; then
                  echo "❌ Error: package.json version ($PKG_VERSION) does not match requested tag version ($VERSION_NO_V)"
                  echo "Run 'task updateversions {{.VERSION}}' first to update versions"
                  exit 1
                fi
            # Create the git tag
            - git tag -a {{.VERSION}} -m "Release {{.VERSION}}"
            - echo "✅ Created git tag {{.VERSION}}"
            - echo "To push the tag, run\n  git push origin {{.VERSION}}"

    release:tag:
        desc: Set version in files and create a git tag in one step
        vars:
            VERSION: "{{.CLI_ARGS}}"
        cmds:
            # Check if git directory is clean before making any changes
            - |
                if [ -n "$(git status --porcelain)" ]; then
                  echo "❌ Error: Git directory is not clean. Please commit all changes before releasing."
                  exit 1
                fi
            # Update versions in files
            - task: updateversions
              vars: { VERSION: "{{.VERSION}}" }
            # Commit the version changes
            - git add server/pkg/serverbase/serverbase.go pkg/base/base.go package.json
            - git commit -m "Bump version to {{.VERSION}}"
            # Create the git tag
            - task: release:tag:git
              vars: { VERSION: "{{.VERSION}}" }
            - echo "✅ Version {{.VERSION}} released successfully"
