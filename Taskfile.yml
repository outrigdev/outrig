version: "3"

tasks:
    dev:vite:
        desc: Run the Vite development server
        cmds:
            - npm run dev

    dev:
        desc: Run the Go server in development mode
        cmds:
            - mkdir -p server/pkg/web/dist
            - touch server/pkg/web/dist/.gitkeep
            - OUTRIG_DEV=1 go run server/main-server.go server

    clean:webdist:
        desc: Clean the web embed directory for Go server
        cmds:
            - rm -rf server/pkg/web/dist
            - mkdir -p server/pkg/web/dist
            - touch server/pkg/web/dist/.gitkeep

    clean:
        desc: Clean build artifacts
        deps: [clean:webdist]
        cmds:
            - rm -rf dist dist-fe

    build:frontend:
        desc: Build the frontend for production
        deps: [clean]
        cmds:
            - npm run build
            - cp -r dist-fe/* server/pkg/web/dist/

    build:server:
        desc: Build the Go server with embedded frontend
        deps: [build:frontend]
        cmds:
            - mkdir -p bin/
            - go build -ldflags "-X main.OutrigBuildTime=$(date +%Y%m%d%H%M%S) -X main.OutrigCommit=$(git rev-parse --short HEAD)" -o bin/outrig server/main-server.go

    build:
        desc: Build everything for production
        cmds:
            - task: build:server

    prod:
        desc: Run the production server
        deps:
            - build
        cmds:
            - ./bin/outrig server

    generate:
        desc: Generate RPC code (Go/TypeScript)
        cmds:
            - go run server/cmd/generatego/main-generatego.go
            - go run server/cmd/generatets/main-generatets.go

    testrun:
        desc: run main-test.go to generate some fake data
        cmds:
            - go run server/cmd/test/main-test.go

    testsmall:
        desc: run main-testsmall.go to generate minimal test data
        cmds:
            - go run server/cmd/testsmall/main-testsmall.go

    release:check:
        desc: Check if the GoReleaser configuration is valid
        cmds:
            - goreleaser check

    release:local:
        desc: Build a local release for testing (no publishing)
        cmds:
            - goreleaser release --snapshot --clean

    release:
        desc: Create and publish a new release
        cmds:
            - goreleaser release --clean

    install:
        desc: Build and install outrig to ~/.local/bin
        deps:
            - build
        cmds:
            - mkdir -p ~/.local/bin
            - cp bin/outrig ~/.local/bin/
            - chmod 755 ~/.local/bin/outrig
            - echo "Outrig installed to ~/.local/bin/outrig"
