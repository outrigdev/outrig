// Copyright 2025, Command Line Inc.
// SPDX-License-Identifier: Apache-2.0

// generated by cmd/generate/main-generatets.go

import { RpcClient } from "./rpc";

class RpcApiType {
    // command "clearnonactiveappruns" [call]
    ClearNonActiveAppRunsCommand(client: RpcClient, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("clearnonactiveappruns", null, opts);
    }

    // command "eventpublish" [call]
    EventPublishCommand(client: RpcClient, data: EventType, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("eventpublish", data, opts);
    }

    // command "eventreadhistory" [call]
    EventReadHistoryCommand(client: RpcClient, data: EventReadHistoryData, opts?: RpcOpts): Promise<EventType[]> {
        return client.rpcCall("eventreadhistory", data, opts);
    }

    // command "eventsub" [call]
    EventSubCommand(client: RpcClient, data: SubscriptionRequest, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("eventsub", data, opts);
    }

    // command "eventunsub" [call]
    EventUnsubCommand(client: RpcClient, data: string, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("eventunsub", data, opts);
    }

    // command "eventunsuball" [call]
    EventUnsubAllCommand(client: RpcClient, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("eventunsuball", null, opts);
    }

    // command "getapprungoroutinesbyids" [call]
    GetAppRunGoRoutinesByIdsCommand(client: RpcClient, data: AppRunGoRoutinesByIdsRequest, opts?: RpcOpts): Promise<AppRunGoRoutinesData> {
        return client.rpcCall("getapprungoroutinesbyids", data, opts);
    }

    // command "getapprunruntimestats" [call]
    GetAppRunRuntimeStatsCommand(client: RpcClient, data: AppRunRequest, opts?: RpcOpts): Promise<AppRunRuntimeStatsData> {
        return client.rpcCall("getapprunruntimestats", data, opts);
    }

    // command "getappruns" [call]
    GetAppRunsCommand(client: RpcClient, data: AppRunUpdatesRequest, opts?: RpcOpts): Promise<AppRunsData> {
        return client.rpcCall("getappruns", data, opts);
    }

    // command "getapprunwatchesbyids" [call]
    GetAppRunWatchesByIdsCommand(client: RpcClient, data: AppRunWatchesByIdsRequest, opts?: RpcOpts): Promise<AppRunWatchesData> {
        return client.rpcCall("getapprunwatchesbyids", data, opts);
    }

    // command "getdemoappstatus" [call]
    GetDemoAppStatusCommand(client: RpcClient, opts?: RpcOpts): Promise<string> {
        return client.rpcCall("getdemoappstatus", null, opts);
    }

    // command "goroutinesearchrequest" [call]
    GoRoutineSearchRequestCommand(client: RpcClient, data: GoRoutineSearchRequestData, opts?: RpcOpts): Promise<GoRoutineSearchResultData> {
        return client.rpcCall("goroutinesearchrequest", data, opts);
    }

    // command "killdemoapp" [call]
    KillDemoAppCommand(client: RpcClient, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("killdemoapp", null, opts);
    }

    // command "launchdemoapp" [call]
    LaunchDemoAppCommand(client: RpcClient, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("launchdemoapp", null, opts);
    }

    // command "loggetmarkedlines" [call]
    LogGetMarkedLinesCommand(client: RpcClient, data: MarkedLinesRequestData, opts?: RpcOpts): Promise<MarkedLinesResultData> {
        return client.rpcCall("loggetmarkedlines", data, opts);
    }

    // command "logsearchrequest" [call]
    LogSearchRequestCommand(client: RpcClient, data: SearchRequestData, opts?: RpcOpts): Promise<SearchResultData> {
        return client.rpcCall("logsearchrequest", data, opts);
    }

    // command "logstreamupdate" [call]
    LogStreamUpdateCommand(client: RpcClient, data: StreamUpdateData, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("logstreamupdate", data, opts);
    }

    // command "logupdatemarkedlines" [call]
    LogUpdateMarkedLinesCommand(client: RpcClient, data: MarkedLinesData, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("logupdatemarkedlines", data, opts);
    }

    // command "logwidgetadmin" [call]
    LogWidgetAdminCommand(client: RpcClient, data: LogWidgetAdminData, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("logwidgetadmin", data, opts);
    }

    // command "message" [call]
    MessageCommand(client: RpcClient, data: CommandMessageData, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("message", data, opts);
    }

    // command "sendteventfe" [call]
    SendTEventFeCommand(client: RpcClient, data: TEventFeData, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("sendteventfe", data, opts);
    }

    // command "triggertrayupdate" [call]
    TriggerTrayUpdateCommand(client: RpcClient, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("triggertrayupdate", null, opts);
    }

    // command "updatebrowsertaburl" [call]
    UpdateBrowserTabUrlCommand(client: RpcClient, data: BrowserTabUrlData, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("updatebrowsertaburl", data, opts);
    }

    // command "updatecheck" [call]
    UpdateCheckCommand(client: RpcClient, opts?: RpcOpts): Promise<UpdateCheckData> {
        return client.rpcCall("updatecheck", null, opts);
    }

    // command "updatestatus" [call]
    UpdateStatusCommand(client: RpcClient, data: StatusUpdateData, opts?: RpcOpts): Promise<void> {
        return client.rpcCall("updatestatus", data, opts);
    }

    // command "watchsearchrequest" [call]
    WatchSearchRequestCommand(client: RpcClient, data: WatchSearchRequestData, opts?: RpcOpts): Promise<WatchSearchResultData> {
        return client.rpcCall("watchsearchrequest", data, opts);
    }

}

export const RpcApi = new RpcApiType();
